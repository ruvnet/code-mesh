name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.rust }}

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      if: matrix.rust == 'stable'
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests (native)
      run: cargo test --workspace --all-features

    - name: Run tests (no default features)
      run: cargo test --workspace --no-default-features

    - name: Run benchmarks
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo bench --workspace

    - name: Test documentation
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo doc --workspace --all-features --no-deps

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v2

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: true

  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: code-mesh-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: code-mesh-windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: code-mesh-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: code-mesh-macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}-${{ matrix.target }}

    - name: Build CLI
      run: cargo build --release --bin code-mesh --target ${{ matrix.target }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          target/${{ matrix.target }}/release/code-mesh*
          !target/${{ matrix.target }}/release/code-mesh.d

  wasm:
    name: WASM Build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: cargo install wasm-pack

    - name: Build WASM package
      run: wasm-pack build --target web --scope code-mesh crates/code-mesh-wasm

    - name: Run WASM tests
      run: wasm-pack test --node crates/code-mesh-wasm

    - name: Upload WASM artifact
      uses: actions/upload-artifact@v3
      with:
        name: code-mesh-wasm
        path: crates/code-mesh-wasm/pkg/