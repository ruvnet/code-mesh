name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable'

    - name: Build
      run: cargo build --all-targets --all-features

    - name: Run unit tests
      run: cargo test --all-features --lib

    - name: Run integration tests
      run: cargo test --all-features --test '*'

    - name: Run doc tests
      run: cargo test --all-features --doc

  test-wasm:
    name: WASM Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: wasm-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build WASM
      run: wasm-pack build crates/code-mesh-wasm --target web

    - name: Run WASM tests in Node.js
      run: wasm-pack test crates/code-mesh-wasm --node

    - name: Run WASM tests in browser (headless)
      run: wasm-pack test crates/code-mesh-wasm --headless --chrome

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: coverage-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Generate coverage report
      run: |
        cargo tarpaulin --all-features --workspace --timeout 120 \
          --exclude-files "tests/*" "benches/*" "examples/*" \
          --out xml --output-dir coverage/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage/cobertura.xml
        fail_ci_if_error: true

    - name: Archive coverage results
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: bench-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run benchmarks
      run: cargo bench --all-features

    - name: Archive benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: target/criterion/

  property-tests:
    name: Property-based Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: proptest-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run property tests
      run: cargo test --all-features prop_
      env:
        PROPTEST_CASES: 10000

  mutation-tests:
    name: Mutation Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-mutants
      run: cargo install cargo-mutants

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: mutants-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run mutation tests
      run: cargo mutants --timeout 60 --jobs 2
      continue-on-error: true

    - name: Archive mutation test results
      uses: actions/upload-artifact@v3
      with:
        name: mutation-test-results
        path: mutants.out/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo deny
      uses: EmbarkStudios/cargo-deny-action@v2

  integration-real-apis:
    name: Integration Tests with Real APIs
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      # These would be set as GitHub secrets
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_TEST_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_TEST_API_KEY }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: integration-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run integration tests with real APIs
      run: cargo test --all-features integration_real_
      continue-on-error: true

  memory-tests:
    name: Memory Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install Valgrind
      run: sudo apt-get install valgrind

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: memory-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run memory tests
      run: |
        cargo build --tests --all-features
        for test_binary in $(find target/debug/deps -name '*-*' -type f -executable); do
          echo "Running memory test on $test_binary"
          valgrind --tool=memcheck --leak-check=full --error-exitcode=1 $test_binary --test-threads=1 || true
        done

  cross-compile:
    name: Cross Compilation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross

    - name: Cross compile
      run: cross build --target ${{ matrix.target }} --all-features

  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [test, test-wasm, coverage, property-tests]
    if: always()
    steps:
    - name: Generate test report
      run: |
        echo "# Test Results Summary" > test-report.md
        echo "" >> test-report.md
        echo "- Unit tests: ${{ needs.test.result }}" >> test-report.md
        echo "- WASM tests: ${{ needs.test-wasm.result }}" >> test-report.md
        echo "- Coverage: ${{ needs.coverage.result }}" >> test-report.md
        echo "- Property tests: ${{ needs.property-tests.result }}" >> test-report.md

    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: test-report.md